version: 1.0.{build}

image: Visual Studio 2017

environment:
  matrix:
  - PLATFORM: x64

install:
  # Set Environment Variables
  - SET PATH_ORIGINAL=%PATH%
  - SET WORK_DIR=c:\projects
  - CD %WORK_DIR%
  
  # Install packages
  - choco install -y ninja
  - choco install -y wget
  
  # Download source
  - CD %WORK_DIR%
  # llvm source
  - wget -q -O llvm_src.tar.gz https://github.com/tinysun212/swift-llvm/archive/swift-windows-4.0-branch.tar.gz
  # Extract gz and then extract tar in silent mode(-bd -bso0)
  - 7z x llvm_src.tar.gz -so | 7z x -si -ttar -bd -bso0
  - MOVE pax_global_header llvm_commit_id
  - MOVE swift-llvm-swift-windows-4.0-branch llvm
  # clang source
  - wget -q -O clang_src.tar.gz https://github.com/tinysun212/swift-clang/archive/swift-windows-4.0-branch.tar.gz
  - 7z x clang_src.tar.gz -so | 7z x -si -ttar -bd -bso0
  - MOVE pax_global_header clang_commit_id
  - MOVE swift-clang-swift-windows-4.0-branch clang
  # link clang into llvm
  - CD %WORK_DIR%/llvm/tools
  - MKLINK /D clang ..\..\clang
  
build_script:
  # Build clang
  - MKDIR %WORK_DIR%\build\NinjaMSVC\llvm
  - CD %WORK_DIR%/build/NinjaMSVC/llvm
  - CALL "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cmake -G "Ninja" -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_CXX_FLAGS="-DLLVM_ENABLE_DUMP" ..\..\..\llvm
  # Use artifacts previously created by ninja
  - wget -q https://ci.appveyor.com/api/projects/tinysun212/llvm-prebuilder-163tm/artifacts/swift_llvm_cache.tar.gz
  - 7z x swift_llvm_cache.tar.gz -bd -bso0
  - 7z x swift_llvm_cache.tar -aoa -bd -bso0
  - ninja

after_build:
  - 7z a -so -ttar -r dummy bin/clang.exe bin/clang++.exe bin/llvm-tblgen.exe lib/*.lib lib/clang lib/cmake cmake include tools |  
    7z a -si -tgzip -bd -bso0 swift_llvm_bin.tar.gz
  - MOVE swift_llvm_bin.tar.gz %APPVEYOR_BUILD_FOLDER%

test_script:
  - ECHO skip test

artifacts:
  - path: swift_llvm_bin.tar.gz
    name: Swift-LLVM Binary
