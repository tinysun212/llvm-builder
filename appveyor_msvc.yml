version: 1.0.{build}

image: Visual Studio 2017

environment:
  matrix:
  - PLATFORM: x64

install:
  # Set Environment Variables
  - SET PATH_ORIGINAL=%PATH%
  #- SET "PATH_MSYS64=c:\msys64\usr\bin"
  #- SET PATH=%PATH_MSYS64%;%PATH_ORIGINAL%
  - SET WORK_DIR=c:\projects
  - CD %WORK_DIR%
  
  # Install packages
  - choco install -y ninja
  - choco install -y wget
  
  # Download source
  - CD %WORK_DIR%
  # llvm source
  - wget -q -O llvm_src.tar.gz https://github.com/tinysun212/swift-llvm/archive/swift-windows-4.0-branch.tar.gz
  - c:\msys64\usr\bin\tar zxf llvm_src.tar.gz
  - MOVE swift-llvm-swift-windows-4.0-branch llvm
  # clang source
  - wget -q -O clang_src.tar.gz https://github.com/tinysun212/swift-clang/archive/swift-windows-4.0-branch.tar.gz
  # Pre-extract the targets of the symbolic links
  # The Windows native symbolic link system cann't create a symbolic link to non-exist target.
  - c:\msys64\usr\bin\tar zxf clang_src.tar.gz 
      swift-clang-swift-windows-4.0-branch/test/Driver/Inputs/basic_cross_linux_tree/usr/bin/i386-unknown-linux-gnu-ld.gold
      swift-clang-swift-windows-4.0-branch/test/Driver/Inputs/basic_cross_linux_tree/usr/bin/x86_64-unknown-linux-gnu-ld.gold
      swift-clang-swift-windows-4.0-branch/test/Driver/Inputs/basic_cross_linux_tree/usr/i386-unknown-linux-gnu/bin/ld.gold
      swift-clang-swift-windows-4.0-branch/test/Driver/Inputs/basic_cross_linux_tree/usr/x86_64-unknown-linux-gnu/bin/ld.gold
      swift-clang-swift-windows-4.0-branch/test/Driver/Inputs/multilib_32bit_linux_tree/usr/bin/i386-unknown-linux-gnu-as
      swift-clang-swift-windows-4.0-branch/test/Driver/Inputs/multilib_32bit_linux_tree/usr/bin/i386-unknown-linux-gnu-ld
      swift-clang-swift-windows-4.0-branch/test/Driver/Inputs/multilib_64bit_linux_tree/usr/bin/x86_64-unknown-linux-gnu-as
      swift-clang-swift-windows-4.0-branch/test/Driver/Inputs/multilib_64bit_linux_tree/usr/bin/x86_64-unknown-linux-gnu-ld
  - c:\msys64\usr\bin\tar zxf clang_src.tar.gz
  - MOVE swift-clang-swift-windows-4.0-branch clang
  # link clang into llvm
  - CD %WORK_DIR%/llvm/tools
  - MKLINK /d clang ..\..\clang
  
build_script:
  # Build clang
  - MKDIR %WORK_DIR%\build\NinjaMSVC\llvm
  - CD %WORK_DIR%/build/NinjaMSVC/llvm
  - CALL "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cmake -G "Ninja" -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_CXX_FLAGS="-DLLVM_ENABLE_DUMP" ..\..\..\llvm
  # Use artifacts previously created by ninja
  - wget -q https://ci.appveyor.com/api/projects/tinysun212/llvm-prebuilder-163tm/artifacts/swift_llvm_cache.tar.gz
  - c:\msys64\usr\bin\tar zxf swift_llvm_cache.tar.gz
  - ninja bin/FileCheck.exe

after_build:
  - CD %WORK_DIR%/build/NinjaMSVC/llvm
  - c:\msys64\usr\bin\tar zcf swift_llvm_bin.tar.gz lib/*.a lib/*.lib bin/clang-4.0.exe bin/clang.exe bin/clang++.exe bin/llvm-tblgen.exe cmake include lib/clang lib/cmake tools
  - MOVE swift_llvm_bin.tar.gz %APPVEYOR_BUILD_FOLDER%

test_script:
  - ECHO skip test

artifacts:
  - path: swift_llvm_bin.tar.gz
    name: Swift-LLVM Binary
